"""FIX Log Generator	

This script allows the user to generate _logs for testing _log dashboard.
There are 3 types of _log generated:
1. _logs of proxy , imitating the _logs generated from the proxy that recieve the FIX protocol from the client, stored in "proxy._log"
2. _logs of events, imitating the _logs generated in the event stream in UBS system after the proxy translate the FIX protocol to event _log, stored in "events._log"
3. _logs of gateway, imitating the _log generated by the gateway communicating with Exchange and the event stream , stored in "gateway3._log"

This tool takes no input, you can change the amount of _log generated by changing parameter "num_logs" in the program.

This script uses Python 3 and requires that `random` be installed within the Python
environment you are running this script in.

"""
num_repeats = 3
num_logs_per_system = 700
"""int: number of _log set that you want to be generated 
"""

from enum import Enum
import random
import os
class Logtype(Enum):
    """
    A Enum used to represent the types of _logs

    ...

    Types
    ----------

    ORDER : Enum Type
        representing order requests that can successfully submit to the exchange
    ORDERREJECTATPROXY : Enum Type
        representing order requests that are rejected by proxy that recieved the request
    ORDERREJECTATEXCHANGE : Enum Type
        representing order requests that are not rejected by proxy but are rejected by the Exchange 
    AMEND : Enum Type
        representing successful order amend request
    AMENDREJECTATPROXY : Enum Type
        representing order amend request that are rejected by proxy that recieved the request
    AMENDREJECTATEXCHANGE : Enum Type
        representing order amend request that are not rejected by proxy but are rejected by the Exchange 
    CANCEL : Enum Type
        representing successful order cancel request
    CANCELREJECTEDATPROXY : Enum Type
        representing order cancel request that are rejected by proxy that recieved the request
    CANCELREJECTATEXCHANGE : Enum Type
        representing order cancel request that are not rejected by proxy but are rejected by the Exchange 
    ORDEREXECUTED : Enum Type
        representing successful order request that are currently being executed by the financial exchange 

    """
    ORDER = 1
    ORDERREJECTATPROXY = 2
    ORDERREJECTATEXCHANGE = 3
    AMEND = 4 #35=G EXCHANGE: 39=5
    AMENDREJECTATPROXY = 5 #35=G ORDER AMEND/ORDER REPLACE
    AMENDREJECTATEXCHANGE = 6 #35=G
    CANCEL = 7
    CANCELREJECTEDATPROXY = 8
    CANCELREJECTATEXCHANGE = 9 
    ORDEREXECUTED = 10
	
class Log(object):
    """
    A class used to represent a complete request

    ...

    Attributes
    ----------
    event_id : str
        the event id that the request has given by the event stream has (default "DEFAULT event_id")
    proxy_id : str
        the proxy id that the request has given by the proxy has (default "DEFAULT proxy_id")
    gateway_id : str 
        the gateway id that the request has given by the gateway has (default "DEFAULT gateway_id")
    ordrefid : str
        the order reference id of the request has (default "DEFAULT ordrefid")
    value : int
        the amount the request would like to have(order amount if type is ORDER, amend amount if type is AMEND) has (default 10000)   
    log_type : Logtype
        the type of the request has (default Logtype.ORDER)
    orivalue : int
        origin value of the order, same as the value initially
    qty : int
        only use for ORDEREXECUTED type, used to store the quantity of the order being executed
    
    """
	
    def __init__(self, event_id="DEFAULT event_id", proxy_id= "DEFAULT proxy_id", gateway_id="DEFAULT gateway_id",ordrefid = "DEFAULT ordrefid",value = 10000,  log_type = Logtype.ORDER):
        self.event_id = event_id
        self.proxy_id = proxy_id
        self.gateway_id = gateway_id
        self.value = value
        self.log_type = log_type
        self.orivalue = value
        self.qty = 0
        self.ordrefid = ordrefid

def virtual_proxyin(_log):
    """
    This Function mimics the proxy when _logs are passing from client to proxy.

    Args:
        _log (Log): the _log set that pass into proxy from client

    Returns:
        str: the _log that will be generated if passed in from client

    """
    if _log.log_type == Logtype.ORDER :     
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=D49=MHK_PRD156=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=147=P54=255=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')   
    elif _log.log_type == Logtype.ORDERREJECTATPROXY :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=D49=MHK_PRD156=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=147=P54=255=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')
    elif _log.log_type == Logtype.ORDERREJECTATEXCHANGE :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=D49=MHK_PRD156=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=147=P54=255=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')   
    elif _log.log_type == Logtype.AMEND :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=G49=UBS56=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=247=P54=155=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')  
    elif _log.log_type == Logtype.AMENDREJECTATPROXY :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=G49=UBS56=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=247=P54=155=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')  
    
    elif _log.log_type == Logtype.AMENDREJECTATEXCHANGE :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=G49=UBS56=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=247=P54=155=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')  
    
    elif _log.log_type == Logtype.CANCEL :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=F49=UBS56=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=247=P54=155=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')  
    
    elif _log.log_type == Logtype.CANCELREJECTEDATPROXY :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=F49=UBS56=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=247=P54=155=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')  
    
    elif _log.log_type == Logtype.CANCELREJECTATEXCHANGE :
        _proxylog.write('09:00:05.315179 I FIXPUMP    	proxy: [FIXRX] 8=FIX.4.29=035235=F49=UBS56=MOMSHK_PRD134=32343=N97=N122=20180919-01:00:0552=20180919-01:00:05143=MASKED57=MASKED50=MASKED11=' + _log.proxy_id + '38='+str(_log.value)+'40=247=P54=155=MASKED59=260=20180919-01:00:05100=XHKG15000=0000000000089662598048=MASKED22=100109=MASKED526=CA013680108319801=MASKED9800=MASKED12062=Y5020=MASKED21=110=247\n')  
    
def virtual_eventin(_log):
    """
    This Function mimics the event stream when _logs are passing from proxy to event stream.
    
    Args:
        _log (Log): the _log set that pass into event stream from proxy

    Returns:
        str: the _log that will be generated if passed in event stream from proxy

    """
    if _log.log_type == Logtype.ORDER :   
        _eventlog.write('09:00:05.320457 [ORDER PENDING				] [seq=264566][src=proxy][id=-1][ref=323][orderId=' + _log.event_id + '][refId='+_log.ordrefid+'][parentId=-1][stratType=-1][side=2][masterid=4404834][qtytype=0][qty='+str(_log.value)+'][price=0.00][ordertype=1][capacity=P][tif=2][roll=1][account=MASKED][destination=gateway3][origgroup=MASKED][SIEligible<5035>=N][RoutingTracabilityId<9977>=[218,140]][ClOrdId<11>=' + _log.proxy_id + '][ClientsClOrdId<1984>=CA01368010831][ClientSubId<50>=MASKED][SecurityIdSource<22>=u][SecurityIdType<48>=MASKED][HandleInst<21>=1][BusinessStream<8889>=8][RiskClass<9801>=MASKED][ClientId<109>=MASKED][SapphireOrderId<6720>=896625980][SecondaryClOrdId<526>=CA01368010831][Latencies<9986>=[1537318805315071]]\n')
    elif _log.log_type == Logtype.ORDERREJECTATPROXY :
        _eventlog.write('09:00:05.320457 [PROXY ORDER REJECTED				] [seq=264566][src=proxy][id=-1][ref=323][orderId=' + _log.event_id + '][refId='+_log.ordrefid+'][parentId=-1][stratType=-1][side=2][masterid=4404834][qtytype=0][qty='+str(_log.value)+'][price=0.00][ordertype=1][capacity=P][tif=2][roll=1][account=MASKED][destination=gateway3][origgroup=MASKED][SIEligible<5035>=N][RoutingTracabilityId<9977>=[218,140]][ClOrdId<11>=' + _log.proxy_id + '][ClientsClOrdId<1984>=CA01368010831][ClientSubId<50>=MASKED][SecurityIdSource<22>=u][SecurityIdType<48>=MASKED][HandleInst<21>=1][BusinessStream<8889>=8][RiskClass<9801>=MASKED][ClientId<109>=MASKED][SapphireOrderId<6720>=896625980][SecondaryClOrdId<526>=CA01368010831][Latencies<9986>=[1537318805315071]]\n')
    
    elif _log.log_type == Logtype.ORDERREJECTATEXCHANGE :
        _eventlog.write('09:00:05.320457 [ORDER PENDING				] [seq=264566][src=proxy][id=-1][ref=323][orderId=' + _log.event_id + '][refId='+_log.ordrefid+'][parentId=-1][stratType=-1][side=2][masterid=4404834][qtytype=0][qty='+str(_log.value)+'][price=0.00][ordertype=1][capacity=P][tif=2][roll=1][account=MASKED][destination=gateway3][origgroup=MASKED][SIEligible<5035>=N][RoutingTracabilityId<9977>=[218,140]][ClOrdId<11>=' + _log.proxy_id + '][ClientsClOrdId<1984>=CA01368010831][ClientSubId<50>=MASKED][SecurityIdSource<22>=u][SecurityIdType<48>=MASKED][HandleInst<21>=1][BusinessStream<8889>=8][RiskClass<9801>=MASKED][ClientId<109>=MASKED][SapphireOrderId<6720>=896625980][SecondaryClOrdId<526>=CA01368010831][Latencies<9986>=[1537318805315071]]\n')
    
    elif _log.log_type == Logtype.AMEND :
        print (' ')
    elif _log.log_type == Logtype.AMENDREJECTATPROXY :
        _eventlog.write('09:00:05.320457 [PROXY REPLACE REJECTED				] [seq=264566][src=proxy][id=23416][ref=323][parentId=-1][stratType=-1][side=2][masterid=4404834][qtytype=0][qty='+str(_log.value)+'][price=12.40][ordertype=2][capacity=A][tif=0][roll=1][account=MASKED][destination=gateway3][origgroup=MASKED][SIEligible<5035>=N][RoutingTracabilityId<9977>=[218,140]][ClOrdId<11>=' + _log.proxy_id + '][ClientsClOrdId<1984>=CA01368010831][ClientSubId<50>=MASKED][SecurityIdSource<22>=u][SecurityIdType<48>=MASKED][HandleInst<21>=1][BusinessStream<8889>=8][RiskClass<9801>=MASKED][ClientId<109>=MASKED][SapphireOrderId<6720>=896625980][SecondaryClOrdId<526>=CA01368010831][Latencies<9986>=[1537318805315071]]\n')
    elif _log.log_type == Logtype.AMENDREJECTATEXCHANGE :
        print (' ')
    elif _log.log_type == Logtype.CANCEL :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTEDATPROXY :
        _eventlog.write('09:00:05.320457 [PROXY CANCEL REJECTED				] [seq=264566][src=proxy][id=23416][ref=323][parentId=-1][stratType=-1][side=2][masterid=4404834][ClOrdId<11>=' + _log.proxy_id + '][ClientsClOrdId<1984>=CA01368010831][ClientSubId<50>=MASKED][SecurityIdSource<22>=u][SecurityIdType<48>=MASKED][HandleInst<21>=1][BusinessStream<8889>=8][RiskClass<9801>=MASKED][ClientId<109>=MASKED][SapphireOrderId<6720>=896625980][SecondaryClOrdId<526>=CA01368010831][Latencies<9986>=[1537318805315071]]\n')
    
    elif _log.log_type == Logtype.CANCELREJECTATEXCHANGE :
        print (' ')

def virtual_gatewayin(_log):
    """
    This Function mimics the gateway when _logs are passing from event stream and being picked up by gateway, and also the _logs that are generated by gateway that is passed to Exchange
    
    Args:
        _log (Log): the _log set that is picked up by the gateway

    Returns:
        str: the _log that will be generated if request is picked up by the gateway

    """
    if _log.log_type == Logtype.ORDER :         
        _gatewaylog.write('09:00:05.320249 I gateway3			[EVT.onPending:00] [MAPTX] [NEW][order.RefId='+_log.ordrefid+'][order.OrderId=' + _log.event_id + '][clOrdId=' + _log.gateway_id + '] [seqNo=938]\n')
        _gatewaylog.write('09:00:07.001122 I FIXPUMP		gateway3:[FIXTX] 8=FIXT.1.19=21835=D43=N52=20180919-01:00:07.000122=20180919-01:00:05.32049=UBSACCOUNT56=EXCHANGE34=93811=' + _log.gateway_id + '38='+str(_log.value)+'54=240=159=960=20180919-01:00:05.32048=MASKED22=8453=1448=BROKERID447=D452=1207=XHKG1812=11813=1001814=110=220\n')
    elif _log.log_type == Logtype.ORDERREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.ORDERREJECTATEXCHANGE :
        _gatewaylog.write('09:00:05.320249 I gateway3			[EVT.onPending:00] [MAPTX] [NEW][order.RefId='+_log.ordrefid+'][order.OrderId=' + _log.event_id + '][clOrdId=' + _log.gateway_id + '] [seqNo=938]\n')
        _gatewaylog.write('09:00:07.001122 I FIXPUMP		gateway3:[FIXTX] 8=FIXT.1.19=21835=D43=N52=20180919-01:00:07.000122=20180919-01:00:05.32049=UBSACCOUNT56=EXCHANGE34=93811=' + _log.gateway_id + '38='+str(_log.value)+'54=240=159=960=20180919-01:00:05.32048=MASKED22=8453=1448=BROKERID447=D452=1207=XHKG1812=11813=1001814=110=220\n')
    elif _log.log_type == Logtype.AMEND :
        _gatewaylog.write('09:00:05.320249 I gateway3			[EVT.onPendingReplace:06] [MAPTX] [RPL][order.RefId='+_log.ordrefid+'][order.OrderId=' + _log.event_id + '][clOrdId=' + _log.gateway_id + '] [seqNo=67175]\n')
        _gatewaylog.write('09:00:07.001122 I FIXPUMP		gateway3:[FIXTX] 8=FIXT.1.19=21835=G43=N52=20180919-01:00:07.000122=20180919-01:00:05.32049=UBSACCOUNT56=EXCHANGE34=93811=' + _log.gateway_id + '38='+str(_log.value)+'54=240=159=960=20180919-01:00:05.32048=MASKED22=8453=1448=BROKERID447=D452=1207=XHKG1812=11813=1001814=110=220\n')
    
    elif _log.log_type == Logtype.AMENDREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.AMENDREJECTATEXCHANGE :
        _gatewaylog.write('09:00:05.320249 I gateway3			[EVT.onPendingReplace:06] [MAPTX] [RPL][order.RefId='+_log.ordrefid+'][order.OrderId=' + _log.event_id + '][clOrdId=' + _log.gateway_id + '] [seqNo=67175]\n')
        _gatewaylog.write('09:00:07.001122 I FIXPUMP		gateway3:[FIXTX] 8=FIXT.1.19=21835=G43=N52=20180919-01:00:07.000122=20180919-01:00:05.32049=UBSACCOUNT56=EXCHANGE34=93811=' + _log.gateway_id + '38='+str(_log.value)+'54=240=159=960=20180919-01:00:05.32048=MASKED22=8453=1448=BROKERID447=D452=1207=XHKG1812=11813=1001814=110=220\n')
    
    elif _log.log_type == Logtype.CANCEL :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTEDATPROXY :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTATEXCHANGE :
        print (' ')

def virtual_proxyback(_log):
    """
    This Function mimics the proxy when _logs are passing from event stream and being picked up by proxy.
    
    Args:
        _log (Log): the _log set that is picked up by the proxy

    Returns:
        str: the _log that will be generated if request is picked up by the proxy

    """
    if _log.log_type == Logtype.ORDER :         
        _proxylog.write('09:00:07.005660 I FIXPUMP 		proxy: [FIXTX] 8=FIX.4.29=32035=843=N52=20180919-01:00:07.004122=20180919-01:00:07.00449=MOMSHK_PRD134=32150=gateway337='+_log.ordrefid+'11=' + _log.proxy_id + '109=MASKED17=S-'+_log.ordrefid+'-20180919-120=0150=039=054=238='+str(_log.value)+'40=159=232=031=0.00151='+str(_log.value)+'14=06=0.0047=P55=MASKED48=MASKED22=100167=CS5180=BROKERID198=224204910=075\n')
    elif _log.log_type == Logtype.ORDERREJECTATPROXY :
        _proxylog.write('09:00:07.005660 I FIXPUMP 		proxy: [FIXTX] 8=FIX.4.29=32035=843=N52=20180919-01:00:07.004122=20180919-01:00:07.00449=MOMSHK_PRD134=32150=gateway337='+_log.ordrefid+'11=' + _log.proxy_id + '109=MASKED17=S-'+_log.ordrefid+'-20180919-120=0150=039=854=238='+str(_log.value)+'40=159=232=031=0.00151='+str(_log.value)+'14=058=2054 FUNCTION NOT ALLOWED IN CURRENT TRADING6=0.0047=P55=MASKED48=MASKED22=100167=CS5180=BROKERID198=224204910=075\n')
    elif _log.log_type == Logtype.ORDERREJECTATEXCHANGE :
        print (' ')
    elif _log.log_type == Logtype.AMEND : #35 = 9
        _proxylog.write('09:00:07.005660 I FIXPUMP 		proxy: [FIXTX] 8=FIX.4.29=32035=943=N52=20180919-01:00:07.004122=20180919-01:00:07.00449=MOMSHK_PRD134=32150=gateway337='+_log.ordrefid+'11=' + _log.proxy_id + '109=MASKED17=S-'+_log.ordrefid+'-20180919-120=0150=039=054=238='+str(_log.value)+'40=159=232=031=0.00151='+str(_log.value)+'14=06=0.0047=P55=MASKED48=MASKED22=100167=CS5180=BROKERID198=224204910=075\n')
    
    elif _log.log_type == Logtype.AMENDREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.AMENDREJECTATEXCHANGE :
        _proxylog.write('09:00:07.005660 I FIXPUMP 		proxy: [FIXTX] 8=FIX.4.29=32035=943=N52=20180919-01:00:07.004122=20180919-01:00:07.00449=MOMSHK_PRD134=32150=gateway337='+_log.ordrefid+'11=' + _log.proxy_id + '109=MASKED17=S-'+_log.ordrefid+'-20180919-120=0150=039=054=238='+str(_log.value)+'40=159=232=031=0.00151='+str(_log.value)+'14=06=0.0047=P55=MASKED48=MASKED22=100167=CS5180=BROKERID198=224204910=075\n')
    
    elif _log.log_type == Logtype.CANCEL :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTEDATPROXY :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTATEXCHANGE :
        print (' ')

def virtual_eventback(_log):
    """
    This Function mimics the event stream when _logs are passing from gateway to event stream.
    
    Args:
        _log (Log): the _log set that pass into event stream from gateway

    Returns:
        str: the _log that will be generated if passed in event stream from gateway

    """
    if _log.log_type == Logtype.ORDER :         
        _eventlog.write('09:00:07.005165 [ORDER ACCEPTED				] [seq=265552][src=gateway3][id=' + _log.event_id + '][ref=942][SecondaryClOrdId<526>=' + _log.gateway_id + '][SecondaryOrderId<198>=2242049][ExternalConnectionIdentifier<5180>=BROKERID]\n')
    elif _log.log_type == Logtype.ORDERREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.ORDERREJECTATEXCHANGE :
        _eventlog.write('09:00:07.005165 [ORDER REJECTED				] [seq=265552][src=gateway3][id=' + _log.event_id + '][ref=942][SecondaryClOrdId<526>=' + _log.gateway_id + '][SecondaryOrderId<198>=2242049][Text<58>=2054 Function not allowed in current trading state]\n')
    
    elif _log.log_type == Logtype.AMEND :
        _eventlog.write('09:00:07.005165 [ORDER REPLACE ACCEPTED				] [seq=265552][src=gateway3][id=' + _log.event_id + '][ref=12806][SecondaryClOrdId<526>=' + _log.gateway_id + '][SecondaryOrderId<198>=2242049][ExternalConnectionIdentifier<5180>=BROKERID]\n')
    
    elif _log.log_type == Logtype.AMENDREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.AMENDREJECTATEXCHANGE :
        _eventlog.write('09:00:07.005165 [ORDER REPLACE REJECTED				] [seq=265552][src=gateway3][id=' + _log.event_id + '][ref=12806][Text<58>=2043 Invalid order price]\n')
    
    elif _log.log_type == Logtype.CANCEL :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTEDATPROXY :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTATEXCHANGE :
        _gatewaylog.write('09:00:07.005165 [ORDER EXECUTED				] [seq=265552][src=gateway3][id=' + _log.event_id + '][ref=1733][qty='+str(_log.qty)+'][price=90.20][capacity=1][market=UBS][liquidity=U][SecondaryClOrdId<526>=' + _log.gateway_id + '][SecondaryOrderId<198>=2242049][ExternalConnectionIdentifier<5180>=BROKERID]\n')
        
def virtual_gatewayback(_log):
    """
    This Function mimics the _logs that the gateway generated when _logs are passing from Exchange to gateway right after the request

    Args:
        _log (Log): the _log set that pass into gateway from Exchange

    Returns:
        str: the _log that will be generated if passed in from Exchange

    """
    if _log.log_type == Logtype.ORDER :         
        _gatewaylog.write('09:00:07.004858 I FIXPUMP 		gateway3:[FIXRX] 8=FIXT.1.19=22935=849=EXCHANGE56=UBSACCOUNT34=94252=20180919-01:00:07.0041128=911=' + _log.gateway_id + '14=017=hB0.kV./MX6150=0151='+str(_log.value)+'1093=2453=1448=BROKERID447=D452=137=224204938='+str(_log.value)+'39=040=1207=XHKG48=MASKED22=854=259=960=20180919-01:00:07.00010=078\n')
    elif _log.log_type == Logtype.ORDERREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.ORDERREJECTATEXCHANGE :
        _gatewaylog.write('09:00:07.004858 I FIXPUMP 		gateway3:[FIXRX] 8=FIXT.1.19=22935=849=EXCHANGE56=UBSACCOUNT34=94252=20180919-01:00:07.0041128=911=' + _log.gateway_id + '14=017=hB0.kV./MX6150=0151='+str(_log.value)+'1093=2453=1448=BROKERID447=D452=137=224204938='+str(_log.value)+'39=840=1207=XHKG48=MASKED22=854=259=960=20180919-01:00:07.0001328=2054 Function not allowed in current trading state10=078\n')
    
    elif _log.log_type == Logtype.AMEND : #39=5
        _gatewaylog.write('09:00:07.004858 I FIXPUMP 		gateway3:[FIXRX] 8=FIXT.1.19=22935=849=EXCHANGE56=UBSACCOUNT34=94252=20180919-01:00:07.0041128=911=' + _log.gateway_id + '14=017=hB0.kV./MX6150=0151='+str(_log.value)+'1093=2453=1448=BROKERID447=D452=137=224204938='+str(_log.value)+'39=540=1207=XHKG48=MASKED22=854=259=960=20180919-01:00:07.00010=078\n')
    
    elif _log.log_type == Logtype.AMENDREJECTATPROXY :
        print (' ')#DONE
    elif _log.log_type == Logtype.AMENDREJECTATEXCHANGE :
        _gatewaylog.write('09:00:07.004858 I FIXPUMP 		gateway3:[FIXRX] 8=FIXT.1.19=22935=949=EXCHANGE56=UBSACCOUNT34=94252=20180919-01:00:07.0041128=911=' + _log.gateway_id + '14=017=hB0.kV./MX6150=0151='+str(_log.value)+'1093=2453=1448=BROKERID447=D452=137=224204938='+str(_log.value)+'39=040=1207=XHKG48=MASKED22=854=259=960=20180919-01:00:07.0001328=2043 Invalid order price10=078\n')
    
    elif _log.log_type == Logtype.CANCEL :
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTEDATPROXY:
        print (' ')
    elif _log.log_type == Logtype.CANCELREJECTATEXCHANGE :
        print (' ')
    elif _log.log_type == Logtype.ORDEREXECUTED :
        print('')

#different fields
#currently logs that go into a proxy
#proxy

		
def virtual_exchangeback(_log): 
    """
    This Function mimics the _logs that the gateway generated when _logs are passing from Exchange to gateway sometimes after the request, which will generated if an order or somepart of the order is being executed

    Args:
        _log (Log): the _log set that pass into gateway from Exchange

    Returns:
        str: the _log that will be generated if passed in from Exchange

    """   
    _log.log_type = Logtype.ORDEREXECUTED
    while True:   
        k=int(random.random()*5000)# sell how many
        _log.qty = k
        if _log.value > k :
            _log.value=_log.value - k 
            _gatewaylog.write('09:00:07.004858 I FIXPUMP 		gateway3:[FIXRX] 8=FIXT.1.19=29535=849=EXCHANGE56=UBS34=94252=20180919-01:00:07.0041128=911=' + _log.gateway_id + '14='+str(k)+'17=hB0.kV./MX6150=F151='+str(_log.value)+'1093=2453=1448=BROKERID447=D452=1737=224204938='+str(_log.orivalue)+'39='+ str(1)+'40=1207=UBS48=MASKED22=MASKED54=159=960=20180919-01:00:07.00010=078\n')
            
        else:
            _log.value = 0
            _gatewaylog.write('09:00:07.004858 I FIXPUMP 		gateway3:[FIXRX] 8=FIXT.1.19=29535=849=EXCHANGE56=UBS34=94252=20180919-01:00:07.0041128=911=' + _log.gateway_id + '14='+str(k)+'17=hB0.kV./MX6150=F151='+str(_log.value)+'1093=2453=1448=BROKERID447=D452=1737=224204938='+str(_log.orivalue)+'39='+str(2)+'40=1207=UBS48=MASKED22=MASKED54=059=960=20180919-01:00:07.00010=078\n')
            break
        virtual_gatewayback(_log)
        virtual_eventback(_log)
        virtual_proxyback(_log)

for repeat in range(num_repeats):
		
	_logs = []
	_proxy_arr = [('00000000000896' + str(x).zfill(6) + '-000001') for x in random.sample(range(1,100000),num_logs_per_system)]
	_event_arr = random.sample(range(1,100000),num_logs_per_system)
	_gateway_arr = random.sample(range(1,100000),num_logs_per_system)
	_event_arr = random.sample(range(1,100000),num_logs_per_system)
	_ordrefid_arr = random.sample(range(1,1000),num_logs_per_system)
	_share_no_init = random.sample(range(1000,10000),num_logs_per_system)

	for _i in range(0,int(num_logs_per_system/7)) :
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.ORDER),Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.AMEND)])

	for _i in range(int(num_logs_per_system/7),int(num_logs_per_system*2/7)) :
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.ORDER),Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.AMENDREJECTATPROXY)])

	for _i in  range(int(num_logs_per_system*2/7),int(num_logs_per_system*3/7)):
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.ORDER),Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.AMENDREJECTATEXCHANGE)])
	for _i in range(int(3*num_logs_per_system/7),int(4*num_logs_per_system/7)):
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.ORDERREJECTATPROXY)])

	for _i in range(int(4*num_logs_per_system/7),int(5*num_logs_per_system/7)):
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.ORDERREJECTATEXCHANGE)])
	for _i in range(int(5*num_logs_per_system/7),int(6*num_logs_per_system/7)):
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.CANCELREJECTEDATPROXY)])
	for _i in range(int(6*num_logs_per_system/7),num_logs_per_system):
		_logs.extend([Log(str(_event_arr[_i]),_proxy_arr[_i],str(_gateway_arr[_i]),str(_ordrefid_arr[_i]),_share_no_init[_i],Logtype.ORDER)])

	### open the _log file for writing
	_log_files = []
	logs_path = r'./Logs/' 
	
	for type in ['event', 'proxy', 'gateway']:
		full_path = logs_path + type
		if not os.path.exists(full_path):
			os.makedirs(full_path)
		
	_proxylog = open("./Logs/proxy/proxy" + str(repeat) + ".log", "a", newline='')
	_eventlog = open("./Logs/event/event" + str(repeat) + ".log", "a", newline='')
	_gatewaylog = open("./Logs/gateway/gateway"  + str(repeat) + ".log", "a", newline='')

	virtual_loggers = [virtual_proxyin, virtual_eventin, virtual_gatewayin, virtual_gatewayback, virtual_eventback, virtual_proxyback]
					
	#write in the _logs
	try:
		for _log in _logs:
			for virtual_logger in virtual_loggers:
				virtual_logger(_log)
			if _log.log_type == Logtype.ORDER :
				virtual_exchangeback(_log)
		
	#Close the file
	finally:
		for _log_file in _log_files:
			_log_file.close
    
#print finish when the order is executed successfully
print('finished')