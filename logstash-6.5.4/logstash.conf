input {
	file {
		path => ["D:/Desktop/UBS-master/Log_Generator/Logs/*/*.log"]
		start_position => "beginning"
	}
}

filter {
	grok {
        match => { "path" => "D:/Desktop/UBS-master/Log_Generator/Logs/%{WORD:type}/%{WORD}.log" }
        overwrite => [ "type" ]
    }

    if [type] == "proxy" or [type] == "gateway" or [type] == "event"{
		mutate {
			add_field => {
				"proxy_id" => -1
				"event_id" => -1
				"gateway_id" => -1
				"id_complete" => "incomplete"
			}
		}
		date {
			match => ["timeOfLog", "YYYY-MM-dd HH:mm:ss.SSSSSS"]
			target => "timeOfLog"
		}
		if [type] == "proxy" {
			grok {
				match => {
					"message" => "%{TIME:time}.* \[%{GREEDYDATA:proxy_status}\] %{GREEDYDATA:FIX_proxy}"
				}
			}
			ruby {
				code => '
					event.set("timeOfLog", Time.now.strftime("%Y-%m-%d") + " " + event.get("time"))
				'
			}
			fix_protocol {
				fix_message => FIX_proxy
				data_dictionary_path => "D:/Desktop/logstash-6.5.4/vendor/bundle/jruby/2.3.0/gems/logstash-filter-fix_protocol-0.3.3/spec/fixtures/FIX42.xml"
			}
			mutate {
				update => {
					"proxy_id" => "%{ClOrdID}"
				}
			}
		}

		else if [type] == "event" {
			grok {
				match => {
					"message" => "%{TIME:time} \[%{GREEDYDATA:event_status}\] %{GREEDYDATA:EVENT_event}"
				}
			}
			ruby {
				code => '
					event.set("timeOfLog", Time.now.strftime("%Y-%m-%d") + " " + event.get("time"))
				'
			}
			kv {
				source => "EVENT_event"
				field_split_pattern => "(?:^\[|\]$|\]\[(?=[A-Za-z0-9<>]+=))"
				trim_value => "\[\]\r"
				value_split => "="
				target => "EVENT_event_msg"
			}
			if [EVENT_event_msg][orderId] {
				mutate {
					update => {
						"event_id" => "%{[EVENT_event_msg][orderId]}"
						"proxy_id" => "%{[EVENT_event_msg][ClOrdId<11>]}"
					}
				}
			}
			else if [EVENT_event_msg][id] {
				mutate {
					update => {
						"event_id" => "%{[EVENT_event_msg][id]}"
						"gateway_id" => "%{[EVENT_event_msg][SecondaryClOrdId<526>]}"
					}
				}
			}
		}

		else if [type] == "gateway"{
			grok {
				match => {
					"message" => "%{TIME:time}.*\[(?<gateway_status>[A-Z]+)\] %{GREEDYDATA:RAW_gateway}"
				}
			}
			ruby {
				code => '
					event.set("timeOfLog", Time.now.strftime("%Y-%m-%d") + " " + event.get("time"))
				'
			}
			if [gateway_status] == "MAPTX"{
				kv {
					source => "RAW_gateway"
					field_split_pattern => "(?:^\[|\]$|\]\[| (?=[A-Za-z0-9<>]+=|))"
					trim_value => "\[\]\r"
					value_split => "="
					target => "EVENT_gateway_msg"
				}
				mutate {
					update => {
						"gateway_id" => "%{[EVENT_gateway_msg][clOrdId]}"
						"event_id" => "%{[EVENT_gateway_msg][order.OrderId]}"
					}
				}
			}
			else {
				fix_protocol {
					fix_message => RAW_gateway
					data_dictionary_path => "D:/Desktop/logstash-6.5.4/vendor/bundle/jruby/2.3.0/gems/logstash-filter-fix_protocol-0.3.3/spec/fixtures/FIX42.xml"
				}
				mutate {
					update => {
						"gateway_id" => "%{[ClOrdID]}"
					}
				}
			}
		}
	}
	else {
		grok {
			match => {
				"message" => "%{TIME:time}.* \[%{GREEDYDATA:proxy_status}\] %{GREEDYDATA:FIX_proxy}"
			}
		}
	}
}

output {
	stdout {  }
	elasticsearch {
		hosts => ["localhost:9200"]
		index => "new_index"
	}
}